/*
 * Mandatory:
 *
 * vars.redis.image.name
 * vars.redis.image.version
 * 
 * Optional:
 * 
 * vars.redis.limits.cpu
 * vars.redis.limits.memory
 * vars.redis.requests.cpu
 * vars.redis.requests.memory
 * vars.redis.affinityRequired
 * vars.redis.allowOnMaster
 * vars.redis.tolerations[].key
 * vars.redis.tolerations[].value
 * vars.redis.tolerations[].effect
 */

import "robobeerun-templates/affinities.stg"
import "robobeerun-templates/tolerations.stg"
import "robobeerun-templates/resources.stg"
import "robobeerun-templates/tcp_probe.stg"

cc-redis-deploy-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: cloud-muellerpublic-de
  labels:
    app: redis
spec:
  ports:
  - name: "redis"
    port: 6379
    targetPort: 6379
  selector:
    app: redis

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis
  namespace: cloud-muellerpublic-de
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: <vars.redis.image.name>:<vars.redis.image.version>
        name: redis
        command: ["redis-server", "--appendonly", "yes"]
        ports:
        - containerPort: 6379
          name: "redis"
        <resourcesGroup(vars.redis)>
        <tcpProbesPortGroup(vars.redis, "redis")>
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: redis
      restartPolicy: Always
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: <vars.volume.name>
      <affinitiesGroup(vars.redis.affinity)>
      <tolerationMasterGroup(vars.redis.allowOnMaster)>
      <tolerationsGroup(vars.redis.tolerations, vars.redis.allowOnMaster)>

---

>>
